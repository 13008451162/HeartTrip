1. TabLayout和滑动的ScrollView建立联系时，两者都要调用监听，他们的监听可能会发生导致滑动效果比较奇怪。
    比如：滑动ScrollView时，滑动到任意位置，会监听主动使TabLayout滑动到指定的tab；但TabLayout又会监听，如果选择到了该tab，ScrollView会滑动到该区域的View的顶端。结果ScrollView滑动的结果出现偏移。
    比如：TabLayout点击选择了tab时会调用ScrollView的滑动方法滑动到某View的顶端；但ScrollView又会实时监听，使TabLayout滑动到当前View对应的tab上。也会出现冲突。
    我的解决：我加了一个布尔值变量用来判断当前是否正在使ScrollView滑动，或者使TabLayout的Indicator滑动。true时表示正在滑动，此时就不让他再去调用另一个控件监听中的处理方法。

2. TextView设置的标题有时长（需要ellipsize省略），有时短，想让他在长的时候点击可以弹出全部标题，短的时候点击无效。
    解决：textView.getLayout().getEllipsisCount() 获取指定行（- 1）的省略号使用的次数。

3. 调用TextView的getLayout()方法时在布局没有完成之前会返回为空。
    解决：使用 ViewTreeObserver 监听布局变化：
       您可以使用 ViewTreeObserver 来监听视图树的布局变化，一旦布局完成，就可以安全地调用 getLayout() 方法。示例代码如下：

       java
       textView.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
           @Override
           public void onGlobalLayout() {
               // 布局完成后执行你的操作
               Layout layout = textView.getLayout();
               // 处理 layout

               // 移除监听器，避免重复调用
               textView.getViewTreeObserver().removeOnGlobalLayoutListener(this);
           }
       });
       使用 View.post(Runnable) 方法：
       您可以将需要执行的操作包装成一个 Runnable 对象，通过 post 方法提交给 View，确保在布局完成后执行。示例代码如下：

       java
       textView.post(new Runnable() {
           @Override
           public void run() {
               Layout layout = textView.getLayout();
               // 处理 layout
           }
       });
